import React, { useState, useEffect, useCallback, useMemo } from "react";
import { useDispatch } from "react-redux";
import { popUpToOpen } from "../../Redux/chip/chip-slice";
import { sub, formatISO, differenceInMinutes, isValid } from "date-fns";

// MUI components
import Card from "@mui/material/Card";
import CardHeader from "@mui/material/CardHeader";
import IconButton from "@mui/material/IconButton";
import CloseOutlinedIcon from "@mui/icons-material/CloseOutlined";

// Local components
import Dates from "./Calendar";
import Period from "./Period";
import Remainder from "./Reminder";
import DateAndTimeButtonsGroup from "./DateAndTimeButtonsGroup";

// RTK Query
import {
  useGetOneCardQuery,
  useUpdateCardDetailMutation,
} from "../../Redux/cards/cards-operations";

// Constants
const EMPTY_DATE = "1970-01-01T00:00:00.000Z";
const defaultValue = new Date();

const cardStyle = {
  display: "flex",
  flexDirection: "column",
  alignItems: "center",
  borderRadius: "10px",
  width: "304px",
  height: "fit-content",
  padding: "12px",
  backgroundColor: "#fff",
};

const iconButtonStyle = {
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  right: "8px",
  backgroundColor: "rgba(0, 0, 0, 0.14)",
};

// –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
const useDateTimeState = () => {
  const [startDate, setStartDate] = useState(defaultValue);
  const [finishDate, setFinishDate] = useState(defaultValue);
  const [finishTime, setFinishTime] = useState(defaultValue);
  const [isStartEnabled, setIsStartEnabled] = useState(false);
  const [isFinishEnabled, setIsFinishEnabled] = useState(false);
  const [reminderOffsetMinutes, setReminderOffsetMinutes] = useState(-10);

  // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const isEmptyDate = useCallback((date) => {
    if (!date) return true;
    const dateTime = new Date(date).getTime();
    const emptyDateTime = new Date(EMPTY_DATE).getTime();
    return dateTime === emptyDateTime;
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  const initializeFromData = useCallback(
    (data) => {
      if (!data) return;

      const { date_time_start, date_time_finish, reminder_offset_minutes } = data;

      const isStartEmpty = isEmptyDate(date_time_start);
      const isFinishEmpty = isEmptyDate(date_time_finish);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã
      const parsedStartDate = isStartEmpty ? defaultValue : new Date(date_time_start);
      setStartDate(parsedStartDate);

      if (!isFinishEmpty) {
        const finishDateTime = new Date(date_time_finish);
        setFinishDate(finishDateTime);
        setFinishTime(finishDateTime);
      } else {
        setFinishDate(defaultValue);
        setFinishTime(defaultValue);
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏
      setIsStartEnabled(!isStartEmpty);
      setIsFinishEnabled(!isFinishEmpty);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      const offsetMinutes = reminder_offset_minutes || -10;
      setReminderOffsetMinutes(offsetMinutes);
    },
    [isEmptyDate]
  );

  // –£–ü–†–û–©–ï–ù–ù–´–ô –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ë–ï–ó –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏)
  const getSaveObject = useCallback(() => {
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
    let finalFinishDateTime = null;
    if (isFinishEnabled) {
      finalFinishDateTime = new Date(finishDate);
      const timeSource = new Date(finishTime);
      finalFinishDateTime.setHours(
        timeSource.getHours(),
        timeSource.getMinutes(),
        timeSource.getSeconds(),
        timeSource.getMilliseconds()
      );
    }

    return {
      date_time_start: isStartEnabled ? startDate.toISOString() : EMPTY_DATE,
      date_time_finish: isFinishEnabled ? finalFinishDateTime.toISOString() : EMPTY_DATE,
      reminder_offset_minutes: reminderOffsetMinutes === -10 ? null : reminderOffsetMinutes,
      // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º reminder_calculated_time - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    };
  }, [isStartEnabled, isFinishEnabled, startDate, finishDate, finishTime, reminderOffsetMinutes]);

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const calendarValue = useMemo(() => {
    if (isStartEnabled && isFinishEnabled) {
      return [startDate, finishDate];
    }
    if (isStartEnabled && !isFinishEnabled) {
      return startDate;
    }
    if (!isStartEnabled && isFinishEnabled) {
      return finishDate;
    }
    return null;
  }, [isStartEnabled, isFinishEnabled, startDate, finishDate]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    startDate,
    finishDate,
    finishTime,
    isStartEnabled,
    isFinishEnabled,
    reminderOffsetMinutes,
    calendarValue,

    // –°–µ—Ç—Ç–µ—Ä—ã
    setStartDate,
    setFinishDate,
    setFinishTime,
    setIsStartEnabled,
    setIsFinishEnabled,
    setReminderOffsetMinutes,

    // –£—Ç–∏–ª–∏—Ç—ã
    initializeFromData,
    getSaveObject,
    // –£–±–∏—Ä–∞–µ–º createFinishDateTime –∏ getTimeToFinishInMinutes
  };
};

// –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const useDateValidation = (
  startDate,
  finishDate,
  isStartEnabled,
  isFinishEnabled,
  originalStartDate,
  originalEndDate
) => {
  const validationErrors = useMemo(() => {
    const errors = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ "–∏—Å—Ö–æ–¥–Ω–æ–π" (—É–∂–µ –±—ã–ª–∞ –≤ –ë–î)
    const isOriginalDate = (newDate, originalDate) => {
      if (!originalDate || !newDate) return false;
      try {
        const original = new Date(originalDate).toDateString();
        const current = new Date(newDate).toDateString();
        return original === current;
      } catch {
        return false;
      }
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
    const now = new Date();

    if (isStartEnabled && startDate) {
      if (!isOriginalDate(startDate, originalStartDate)) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        const startOfDayDate = new Date(startDate);
        startOfDayDate.setHours(0, 0, 0, 0);

        if (startOfDayDate < today) {
          errors.push("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º");
        }
      }
    }

    if (isFinishEnabled && finishDate) {
      if (!isOriginalDate(finishDate, originalEndDate)) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        const finishDay = new Date(finishDate);
        finishDay.setHours(0, 0, 0, 0);

        if (finishDay < today) {
          errors.push("–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º");
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–∞—á–∞–ª–æ –Ω–µ –ø–æ–∑–∂–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    if (isStartEnabled && isFinishEnabled) {
      if (startDate >= finishDate) {
        errors.push("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è");
      }
    }

    // –£–ë–ò–†–ê–ï–ú –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–º–µ—â–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä

    return errors;
  }, [startDate, finishDate, isStartEnabled, isFinishEnabled, originalStartDate, originalEndDate]);

  const isValidState = validationErrors.length === 0;
  return { validationErrors, isValid: isValidState };
};

export default function DatesAndTimePallet({ cardId }) {
  // –≤–∞–ª–∏–¥–∞—Ü–∏—è cardId
  const isValidCardId = useMemo(() => {
    return (
      cardId &&
      cardId !== "undefined" &&
      cardId !== null &&
      cardId !== undefined &&
      (typeof cardId === "number" || (typeof cardId === "string" && cardId !== ""))
    );
  }, [cardId]);

  console.log("DatesAndTimePallet mounted with cardId:", cardId, "isValid:", isValidCardId);

  const dispatch = useDispatch();
  const [cardTimeUpdate] = useUpdateCardDetailMutation();

  // RTK Query —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º skip
  const {
    data: periodData,
    isLoading,
    error,
    refetch,
  } = useGetOneCardQuery(cardId, {
    skip: !isValidCardId,
    refetchOnMountOrArgChange: true, //–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ cardId
  });

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ö—É–∫–∏
  const dateTimeState = useDateTimeState();
  const validation = useDateValidation(
    dateTimeState.startDate,
    dateTimeState.finishDate,
    dateTimeState.isStartEnabled,
    dateTimeState.isFinishEnabled,
    periodData?.date_time_start,
    periodData?.date_time_finish
  );

  const hasData = periodData && !isLoading && !error && isValidCardId;

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  const isTaskCompleted = periodData?.is_completed || false;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö)
  useEffect(() => {
    if (hasData) {
      console.log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:", periodData);
      dateTimeState.initializeFromData(periodData);
    }
  }, [hasData, periodData]);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ cardId
  useEffect(() => {
    if (isValidCardId && refetch) {
      console.log("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è cardId:", cardId);
      refetch();
    }
  }, [cardId, isValidCardId, refetch]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleCalendarChange = useCallback(
    (calendarValue) => {
      console.log(
        "üìÖ Calendar changed:",
        calendarValue,
        "startEnabled:",
        dateTimeState.isStartEnabled,
        "finishEnabled:",
        dateTimeState.isFinishEnabled
      );

      if (dateTimeState.isStartEnabled && dateTimeState.isFinishEnabled) {
        // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç
        if (Array.isArray(calendarValue) && calendarValue.length === 2) {
          console.log("üìÖ Setting date range:", calendarValue);
          dateTimeState.setStartDate(calendarValue[0]);
          dateTimeState.setFinishDate(calendarValue[1]);
        }
      } else if (dateTimeState.isStartEnabled) {
        // –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
        console.log("üìÖ Setting start date:", calendarValue);
        dateTimeState.setStartDate(calendarValue);
      } else if (dateTimeState.isFinishEnabled) {
        // –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        console.log("üìÖ Setting finish date:", calendarValue);
        dateTimeState.setFinishDate(calendarValue);
      }
    },
    [dateTimeState]
  );

  // —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º –∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  const handleReminderChange = useCallback(
    (offsetMinutes) => {
      if (!dateTimeState.isFinishEnabled && offsetMinutes !== -10) {
        console.log("‚ö†Ô∏è –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
        return;
      }

      if (isTaskCompleted && offsetMinutes !== -10) {
        console.log("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
        return;
      }

      dateTimeState.setReminderOffsetMinutes(offsetMinutes);
      console.log(
        "üîî –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        offsetMinutes === -10 ? "–±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" : `–∑–∞ ${offsetMinutes} –º–∏–Ω—É—Ç`
      );
    },
    [dateTimeState, isTaskCompleted]
  );

  // –ù–û–í–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  const handleReminderDisabled = useCallback((reason, previousValue) => {
    console.log(
      `üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: ${reason}, –±—ã–ª–æ: ${previousValue}`
    );

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    // - –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    // - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    // - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É
  }, []);

  const handleSave = useCallback(async () => {
    if (!validation.isValid) {
      console.error("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", validation.validationErrors);
      alert(`‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n${validation.validationErrors.join("\n")}`);
      return;
    }

    if (!isValidCardId) {
      console.error("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π cardId:", cardId);
      alert("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ä—Ç–æ—á–∫–∏");
      return;
    }

    const saveObject = dateTimeState.getSaveObject();
    console.log("üíæ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –¥–∞—Ç –≤ –ë–î (—Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º):", saveObject);

    // –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    console.log("üîç –û–¢–õ–ê–î–ö–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö:");
    console.log("- cardId:", cardId);
    console.log("- date_time_start:", saveObject.date_time_start);
    console.log("- date_time_finish:", saveObject.date_time_finish);
    console.log("- reminder_offset_minutes:", saveObject.reminder_offset_minutes);

    try {
      const result = await cardTimeUpdate({
        id: cardId,
        ...saveObject,
      }).unwrap();

      console.log("‚úÖ –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", result);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      alert("‚úÖ –î–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!");

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      dispatch(popUpToOpen(0));
    } catch (error) {
      console.error("‚ùå –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", error);

      // –û–¢–õ–ê–î–ö–ê –æ—à–∏–±–∫–∏
      console.log("üîç –û–¢–õ–ê–î–ö–ê –æ—à–∏–±–∫–∏:");
      console.log("- error.status:", error.status);
      console.log("- error.data:", error.data);
      console.log("- error.message:", error.message);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      let errorMessage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞";

      if (error.data) {
        if (typeof error.data === "string") {
          errorMessage = error.data;
        } else if (error.data.detail) {
          errorMessage = error.data.detail;
        } else if (error.data.message) {
          errorMessage = error.data.message;
        } else {
          errorMessage = JSON.stringify(error.data);
        }
      } else if (error.message) {
        errorMessage = error.message;
      }

      console.error("‚ùå –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:", errorMessage);
      alert(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${errorMessage}`);
    }
  }, [validation, isValidCardId, cardId, dateTimeState, cardTimeUpdate, dispatch, refetch]);

  const handleRemove = useCallback(async () => {
    if (!isValidCardId) {
      console.error("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π cardId:", cardId);
      return;
    }

    // –û–ë–ù–û–í–õ–ï–ù–û: –æ—á–∏—â–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    const emptyObject = {
      date_time_start: EMPTY_DATE,
      date_time_finish: EMPTY_DATE,
      reminder_offset_minutes: null, // –ò–∑–º–µ–Ω–µ–Ω–æ
    };

    console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º –¥–∞—Ç—ã –∏–∑ –ë–î");

    try {
      const result = await cardTimeUpdate({ id: cardId, ...emptyObject }).unwrap();
      console.log("‚úÖ –î–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î:", result);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      dateTimeState.setIsStartEnabled(false);
      dateTimeState.setIsFinishEnabled(false);
      dateTimeState.setReminderOffsetMinutes(-10); // –û–±–Ω–æ–≤–ª–µ–Ω–æ

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      alert("‚úÖ –î–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!");

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      dispatch(popUpToOpen(0));
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞—Ç –∏–∑ –ë–î:", error);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const errorMessage = error.data?.detail || error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      alert(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${errorMessage}`);
    }
  }, [isValidCardId, cardId, cardTimeUpdate, dispatch, dateTimeState]);

  // –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
  const renderContent = () => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ cardId
    if (!isValidCardId) {
      return (
        <div
          style={{
            padding: "20px",
            textAlign: "center",
            color: "#c62828",
            backgroundColor: "#ffebee",
            borderRadius: "4px",
          }}
        >
          ‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞—Ä—Ç–æ—á–∫–∏
          <div style={{ fontSize: "12px", marginTop: "5px", color: "#666" }}>
            –ü–æ–ª—É—á–µ–Ω: {JSON.stringify(cardId)}
          </div>
        </div>
      );
    }

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if (isLoading) {
      return (
        <div
          style={{
            padding: "20px",
            textAlign: "center",
            color: "#1976d2",
          }}
        >
          ‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏...
        </div>
      );
    }

    // –û—à–∏–±–∫–∏ API
    if (error) {
      return (
        <div
          style={{
            padding: "20px",
            textAlign: "center",
            color: "#c62828",
            backgroundColor: "#ffebee",
            borderRadius: "4px",
          }}
        >
          ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
          <div style={{ fontSize: "12px", marginTop: "5px" }}>
            {error.message || error.data?.detail || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}
          </div>
          <button
            onClick={() => refetch()}
            style={{
              marginTop: "10px",
              padding: "5px 10px",
              fontSize: "12px",
              border: "1px solid #c62828",
              background: "transparent",
              color: "#c62828",
              borderRadius: "4px",
              cursor: "pointer",
            }}
          >
            –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
          </button>
        </div>
      );
    }

    // –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if (!periodData) {
      return (
        <div
          style={{
            padding: "20px",
            textAlign: "center",
            color: "#666",
          }}
        >
          ‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏...
          <button
            onClick={() => refetch()}
            style={{
              marginTop: "10px",
              padding: "5px 10px",
              fontSize: "12px",
              border: "1px solid #666",
              background: "transparent",
              color: "#666",
              borderRadius: "4px",
              cursor: "pointer",
            }}
          >
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
      );
    }

    // –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return (
      <>
        <CardHeader
          sx={{
            padding: "10px",
            marginBottom: "10px",
          }}
          titleTypographyProps={{ textAlign: "center", fontSize: "20px", color: "#172b4d" }}
          title="–î–∞—Ç—ã –∏ –≤—Ä–µ–º—è"
          action={
            <IconButton
              onClick={() => dispatch(popUpToOpen(0))}
              aria-label="Close dates and time pallet"
              sx={iconButtonStyle}
            >
              <CloseOutlinedIcon sx={{ fontSize: "18px" }} />
            </IconButton>
          }
        />

        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
        {validation.validationErrors.length > 0 && (
          <div
            style={{
              padding: "10px",
              marginBottom: "10px",
              backgroundColor: "#ffebee",
              borderRadius: "4px",
              color: "#c62828",
            }}
          >
            {validation.validationErrors.map((error, index) => (
              <div key={index}>‚ö†Ô∏è {error}</div>
            ))}
          </div>
        )}

        <Dates
          getDayHandler={handleCalendarChange}
          calendarValue={dateTimeState.calendarValue}
          startDayChecked={dateTimeState.isStartEnabled}
          completitionDayChecked={dateTimeState.isFinishEnabled}
        />

        <Period
          startDayValue={dateTimeState.startDate}
          completitionDayValue={dateTimeState.finishDate}
          completitionTimeValue={dateTimeState.finishTime}
          getStartDayHandler={dateTimeState.setStartDate}
          getCompletitionDayHandler={dateTimeState.setFinishDate}
          getCompletitionTimeHandler={dateTimeState.setFinishTime}
          getstartDayCheckedHandler={(checked) => {
            console.log("Setting start enabled:", checked);
            dateTimeState.setIsStartEnabled(checked);
          }}
          getcompletitionDayCheckedHandler={(checked) => {
            console.log("Setting finish enabled:", checked);
            dateTimeState.setIsFinishEnabled(checked);
          }}
          startDayChecked={dateTimeState.isStartEnabled}
          completitionDayChecked={dateTimeState.isFinishEnabled}
          defaultValue={defaultValue}
          originalStartDate={periodData?.date_time_start} // –ù–û–í–´–ô: –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
          originalEndDate={periodData?.date_time_finish} // –ù–û–í–´–ô: –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        />

        <Remainder
          defaultValue={dateTimeState.reminderOffsetMinutes} // –û–±–Ω–æ–≤–ª–µ–Ω–æ
          remaindeBefore={handleReminderChange}
          isFinishEnabled={dateTimeState.isFinishEnabled} // –ù–æ–≤—ã–π –ø—Ä–æ–ø
          isCompleted={isTaskCompleted} // –ù–û–í–´–ô: –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
          onReminderDisabled={handleReminderDisabled} // –ù–û–í–´–ô: Callback –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        />

        <DateAndTimeButtonsGroup
          startDayChecked={dateTimeState.isStartEnabled}
          completitionDayChecked={dateTimeState.isFinishEnabled}
          saveChanges={handleSave}
          remove={handleRemove}
          disabled={!validation.isValid}
          validationErrors={validation.validationErrors} // –ü–µ—Ä–µ–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
        />
      </>
    );
  };

  return <Card sx={cardStyle}>{renderContent()}</Card>;
}
