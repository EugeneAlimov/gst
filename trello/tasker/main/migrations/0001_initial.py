# Generated by Django 5.1.2 on 2025-05-24 17:07

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Chip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название метки')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Метка',
                'verbose_name_plural': 'Метки',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color_number', models.IntegerField(blank=True, help_text='Уникальный числовой идентификатор цвета из палитры', unique=True, verbose_name='Номер цвета')),
                ('normal_color', models.CharField(blank=True, help_text='HEX-код цвета в нормальном состоянии', max_length=7, validators=[django.core.validators.RegexValidator(message='Введите корректный HEX-цвет в формате #RGB или #RRGGBB', regex='^#(?:[0-9a-fA-F]{3}){1,2}$')], verbose_name='Нормальный цвет')),
                ('hover_color', models.CharField(blank=True, help_text='HEX-код цвета при наведении курсора', max_length=7, validators=[django.core.validators.RegexValidator(message='Введите корректный HEX-цвет в формате #RGB или #RRGGBB', regex='^#(?:[0-9a-fA-F]{3}){1,2}$')], verbose_name='Цвет при наведении')),
                ('color_name', models.CharField(blank=True, help_text='Человекочитаемое название цвета', max_length=100, verbose_name='Название цвета')),
                ('is_dark', models.BooleanField(default=False, help_text='Определяет, является ли цвет темным (для выбора цвета текста)', verbose_name='Темный цвет')),
                ('text_color', models.CharField(default='#000000', help_text='HEX-код цвета текста для обеспечения контрастности', max_length=7, validators=[django.core.validators.RegexValidator(message='Введите корректный HEX-цвет в формате #RGB или #RRGGBB', regex='^#(?:[0-9a-fA-F]{3}){1,2}$')], verbose_name='Цвет текста')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Цвет',
                'verbose_name_plural': 'Цвета',
                'ordering': ['color_number'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='user_photos/', verbose_name='Фото пользователя')),
                ('user_information', models.TextField(blank=True, null=True, verbose_name='Информация о пользователе')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Профили пользователей',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название доски')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активная доска')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('background_color', models.CharField(default='#FFFFFF', max_length=7, verbose_name='Цвет фона')),
                ('background_image', models.ImageField(blank=True, null=True, upload_to='board_backgrounds/', verbose_name='Фоновое изображение')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='boards', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Доска',
                'verbose_name_plural': 'Доски',
                'ordering': ['-updated'],
            },
        ),
        migrations.AddField(
            model_name='userprofile',
            name='active_board',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='active_users', to='main.board', verbose_name='Активная доска'),
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Название карточки')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Выполнено')),
                ('is_archived', models.BooleanField(default=False, verbose_name='Архивная')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('due_date', models.DateTimeField(blank=True, null=True, verbose_name='Срок выполнения')),
                ('reminder_date', models.DateTimeField(blank=True, null=True, verbose_name='Напоминание')),
                ('priority', models.IntegerField(choices=[(1, 'Низкий'), (2, 'Средний'), (3, 'Высокий'), (4, 'Критический')], default=2, verbose_name='Приоритет')),
                ('is_subscribed', models.BooleanField(default=False, verbose_name='Подписаны на обновления')),
                ('header_image', models.ImageField(blank=True, null=True, upload_to='card_headers/', verbose_name='Изображение заголовка')),
                ('assigned_users', models.ManyToManyField(blank=True, related_name='assigned_cards', to=settings.AUTH_USER_MODEL, verbose_name='Назначенные пользователи')),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='main.board', verbose_name='Доска')),
                ('chips', models.ManyToManyField(blank=True, related_name='cards', to='main.chip', verbose_name='Метки/Чипы')),
            ],
            options={
                'verbose_name': 'Карточка',
                'verbose_name_plural': 'Карточки',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='ChecklistItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255, verbose_name='Описание пункта')),
                ('is_checked', models.BooleanField(default=False, verbose_name='Отмечено')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checklist_items', to='main.card', verbose_name='Карточка')),
            ],
            options={
                'verbose_name': 'Пункт чеклиста',
                'verbose_name_plural': 'Пункты чеклиста',
                'ordering': ['-created'],
            },
        ),
        migrations.AddField(
            model_name='chip',
            name='color',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='chips', to='main.color', verbose_name='Цветовая схема'),
        ),
        migrations.CreateModel(
            name='Column',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название колонки')),
                ('position_on_board', models.PositiveIntegerField(default=0, verbose_name='Позиция на доске')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='columns', to='main.board', verbose_name='Доска')),
            ],
            options={
                'verbose_name': 'Колонка',
                'verbose_name_plural': 'Колонки',
                'ordering': ['position_on_board'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Комментарий')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='main.card', verbose_name='Карточка')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='BoardMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('owner', 'Владелец'), ('admin', 'Администратор'), ('editor', 'Редактор'), ('viewer', 'Наблюдатель')], default='viewer', max_length=20, verbose_name='Роль')),
                ('joined_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата присоединения')),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='board_memberships', to='main.board', verbose_name='Доска')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='board_memberships', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Участие в доске',
                'verbose_name_plural': 'Участия в досках',
                'unique_together': {('user', 'board')},
            },
        ),
        migrations.CreateModel(
            name='CardInColumn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position_in_column', models.PositiveIntegerField(default=0, verbose_name='Позиция в колонке')),
                ('is_archived', models.BooleanField(default=False, verbose_name='Архивная')),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='card_in_columns', to='main.card', verbose_name='Карточка')),
                ('column', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='card_in_columns', to='main.column', verbose_name='Колонка')),
            ],
            options={
                'verbose_name': 'Карточка в колонке',
                'verbose_name_plural': 'Карточки в колонках',
                'ordering': ['position_in_column'],
                'unique_together': {('card', 'column')},
            },
        ),
    ]
