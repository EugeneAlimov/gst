# from django.core.management.base import BaseCommand
# from django.core.mail import send_mail
# from django.utils import timezone
# from django.conf import settings
# from main.models import Card
#
#
# class Command(BaseCommand):
#     help = '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'
#
#     def handle(self, *args, **options):
#         now = timezone.now()
#         self.stdout.write(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}")
#
#         # –ü–æ–∫–∞–∑–∞—Ç—å –í–°–ï –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
#         all_reminders = Card.objects.filter(
#             reminder_calculated_time__isnull=False
#         ).values('id', 'name', 'reminder_calculated_time', 'is_completed', 'is_archived')
#
#         self.stdout.write(f"–í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:")
#         for card in all_reminders:
#             self.stdout.write(
#                 f"  ID: {card['id']}, –≤—Ä–µ–º—è: {card['reminder_calculated_time']}, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {card['is_completed']}")
#
#         # –ù–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≥–¥–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ
#         cards_to_remind = Card.objects.filter(
#             reminder_calculated_time__lte=now,
#             reminder_calculated_time__isnull=False,
#             is_completed=False,
#             is_archived=False
#         ).select_related('board').prefetch_related('assigned_users')
#
#         self.stdout.write(f"–ù–∞–π–¥–µ–Ω–æ {cards_to_remind.count()} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
#
#         test_card = Card.objects.get(id=4)
#         self.stdout.write(f"üß™ –¢–ï–°–¢: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É {test_card.id}")
#         self.send_reminder(test_card)
#
#     def send_reminder(self, card):
#         try:
#             # –û—Ç–ø—Ä–∞–≤–∏—Ç—å email –≤—Å–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
#             for user in card.assigned_users.all():
#                 if user.email:
#                     send_mail(
#                         subject=f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {card.name or "–ó–∞–¥–∞—á–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}',
#                         message=f'–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ "{card.name}" –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ {card.date_time_finish}',
#                         from_email=settings.DEFAULT_FROM_EMAIL,
#                         recipient_list=[user.email],
#                     )
#                     self.stdout.write(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {user.email}")
#
#             # –û–±–Ω—É–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
#             card.reminder_calculated_time = None
#             card.reminder_offset_minutes = None
#             card.save()
#
#             self.stdout.write(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏: {card.name}")
#
#         except Exception as e:
#             self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}"))

# trello/tasker/main/management/commands/send_reminders.py

from django.core.management.base import BaseCommand
from django.core.mail import send_mail
from django.utils import timezone
from django.conf import settings
from main.models import Card, ReminderLog
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ',
        )
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏',
        )

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∫–æ–º–∞–Ω–¥—ã"""
        self.dry_run = options.get('dry_run', False)
        self.verbose = options.get('verbose', False)

        now = timezone.now()

        if self.verbose:
            self.stdout.write(f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}")
            self.stdout.write(f"üîß –†–µ–∂–∏–º dry-run: {self.dry_run}")

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        self.show_reminders_stats()

        # –ù–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≥–¥–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ
        cards_to_remind = self.get_cards_to_remind(now)

        if not cards_to_remind:
            self.stdout.write(self.style.SUCCESS("‚úÖ –ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"))
            return

        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        success_count = 0
        error_count = 0

        cards_list = list(cards_to_remind)
        self.stdout.write(f"üì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(cards_list)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

        for card in cards_list:
            try:
                if self.send_reminder(card):
                    success_count += 1
                else:
                    error_count += 1
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {card.id}: {e}")
                )
                error_count += 1
                logger.error(f"Error processing card {card.id}: {e}", exc_info=True)

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write("\n" + "=" * 50)
        self.stdout.write(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        self.stdout.write(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}")
        self.stdout.write(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
        self.stdout.write(f"   üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(cards_list)}")

        if error_count == 0:
            self.stdout.write(self.style.SUCCESS("üéâ –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"))
        else:
            self.stdout.write(self.style.WARNING(f"‚ö†Ô∏è  –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å {error_count} –æ—à–∏–±–∫–∞–º–∏"))

    def show_reminders_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        if not self.verbose:
            return

        all_reminders = Card.objects.filter(
            reminder_calculated_time__isnull=False
        ).values('id', 'name', 'reminder_calculated_time', 'is_completed', 'is_archived')

        self.stdout.write(f"\nüìã –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ ({all_reminders.count()}):")

        if not all_reminders:
            self.stdout.write("   (–Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏)")
            return

        for card in all_reminders:
            status = "‚úÖ" if not card['is_completed'] else "‚úîÔ∏è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            if card['is_archived']:
                status = "üì¶ –∞—Ä—Ö–∏–≤"

            self.stdout.write(
                f"   ID: {card['id']}, "
                f"–≤—Ä–µ–º—è: {card['reminder_calculated_time']}, "
                f"—Å—Ç–∞—Ç—É—Å: {status}, "
                f"–Ω–∞–∑–≤–∞–Ω–∏–µ: '{card['name'] or '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}'"
            )

    def get_cards_to_remind(self, now):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        cards_to_remind = Card.objects.filter(
            reminder_calculated_time__lte=now,
            reminder_calculated_time__isnull=False,
            is_completed=False,
            is_archived=False
        ).select_related('board').prefetch_related('assigned_users')

        count = cards_to_remind.count()
        self.stdout.write(f"üîç –ù–∞–π–¥–µ–Ω–æ {count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")

        return cards_to_remind

    def send_reminder(self, card):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏
        """
        self.stdout.write(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É ID: {card.id}")

        if self.verbose:
            self.stdout.write(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: '{card.name or '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}'")
            self.stdout.write(f"   üìÖ –°—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {card.date_time_finish}")
            self.stdout.write(f"   ‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {card.reminder_calculated_time}")

        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            users = card.assigned_users.all()

            if not users.exists():
                self.stdout.write(f"   ‚ö†Ô∏è  –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ {card.id}")
                # –í—Å—ë —Ä–∞–≤–Ω–æ –æ–±–Ω—É–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                self.clear_reminder(card)
                return True

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å email –≤—Å–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            emails_sent = 0
            emails_failed = 0

            for user in users:
                if self.verbose:
                    self.stdout.write(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}, email: {user.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")

                if user.email:
                    try:
                        if self.send_email_to_user(card, user):
                            emails_sent += 1
                        else:
                            emails_failed += 1
                    except Exception as e:
                        self.stdout.write(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email {user.email}: {e}")
                        emails_failed += 1
                        logger.error(f"Email sending error for user {user.id}: {e}")
                else:
                    self.stdout.write(f"   ‚ö†Ô∏è  –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –Ω–µ —É–∫–∞–∑–∞–Ω email")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.stdout.write(f"   üìä Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {emails_sent}, –æ—à–∏–±–æ–∫: {emails_failed}")

            # –û–±–Ω—É–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
            if not self.dry_run:
                self.clear_reminder(card)
                self.stdout.write(f"   üßπ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω—É–ª–µ–Ω–æ")
            else:
                self.stdout.write(f"   üßπ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ–±–Ω—É–ª–µ–Ω–æ (dry-run —Ä–µ–∂–∏–º)")

            self.stdout.write(f"   ‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ {card.id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            self.stdout.write(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ {card.id}: {e}")
            logger.error(f"Error processing card {card.id}: {e}", exc_info=True)
            return False

    def send_email_to_user(self, card, user):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å email –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        if self.dry_run:
            self.stdout.write(f"   üìß [DRY-RUN] Email –±—ã–ª –±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {user.email}")
            return True

        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è email
            card_name = card.name or "–ó–∞–¥–∞—á–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            board_name = card.board.name if card.board else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–æ—Å–∫–∞"

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            if card.date_time_finish:
                finish_time = card.date_time_finish.strftime("%d.%m.%Y –≤ %H:%M")
            else:
                finish_time = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

            # –¢–µ–º–∞ –ø–∏—Å—å–º–∞
            subject = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {card_name}"

            # –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
            message = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name or user.username}!

–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–±—É–µ—Ç –≤–∞—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è:

üìã –ó–∞–¥–∞—á–∞: {card_name}
üè¢ –î–æ—Å–∫–∞: {board_name}
‚è∞ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {finish_time}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.

---
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
"""

            # HTML –≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            html_message = f"""
<html>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
    <h2 style="color: #007bff;">‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ</h2>

    <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <strong>{user.first_name or user.username}</strong>!</p>

    <p>–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–±—É–µ—Ç –≤–∞—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è:</p>

    <div style="background: #f8f9fa; padding: 15px; border-left: 4px solid #007bff; margin: 15px 0;">
        <p><strong>üìã –ó–∞–¥–∞—á–∞:</strong> {card_name}</p>
        <p><strong>üè¢ –î–æ—Å–∫–∞:</strong> {board_name}</p>
        <p><strong>‚è∞ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> {finish_time}</p>
    </div>

    <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.</p>

    <hr style="margin: 20px 0; border: none; border-top: 1px solid #eee;">
    <p style="color: #666; font-size: 12px;">–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏</p>
</body>
</html>
"""

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å email
            send_mail(
                subject=subject,
                message=message,
                from_email=getattr(settings, 'DEFAULT_FROM_EMAIL', 'noreply@company.com'),
                recipient_list=[user.email],
                html_message=html_message,
                fail_silently=False,
            )

            self.stdout.write(f"   üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {user.email}")
            logger.info(f"Reminder email sent to {user.email} for card {card.id}")
            return True

        except Exception as e:
            self.stdout.write(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email {user.email}: {e}")
            logger.error(f"Failed to send email to {user.email}: {e}")
            return False

    def clear_reminder(self, card):
        """–û–±–Ω—É–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            card.reminder_calculated_time = None
            card.reminder_offset_minutes = None
            card.save()


            if self.verbose:
                self.stdout.write(f"   üßπ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ {card.id} –æ–±–Ω—É–ª–µ–Ω–æ")

        except Exception as e:
            self.stdout.write(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ {card.id}: {e}")
            logger.error(f"Failed to clear reminder for card {card.id}: {e}")
            raise