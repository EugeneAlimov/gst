from rest_framework import serializers
from .utils.reminder_utils import validate_reminder_offset
from .models import *


class BoardSerializer(serializers.ModelSerializer):
    class Meta:
        model = Board
        fields = ('id', 'name', 'created', 'updated')  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è


class ActiveBoardSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserProfile
        fields = ['active_board']

    def update(self, instance, validated_data):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ—Å–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_board = validated_data.get('active_board')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–æ—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not Board.objects.filter(id=active_board.id).exists():
            raise serializers.ValidationError("–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–æ—Å–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –¥–æ—Å–∫—É
        instance.active_board = active_board
        instance.save()
        return instance


class CardInColumnSerializer(serializers.ModelSerializer):
    card_id = serializers.IntegerField()
    column_id = serializers.IntegerField()
    position_in_column = serializers.IntegerField()

    class Meta:
        model = CardInColumn
        fields = ['id', 'card_id', 'column_id', 'position_in_column']


class CardSerializer(serializers.ModelSerializer):
    # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è...
    date_time_start = serializers.DateTimeField(required=False, allow_null=True)
    date_time_finish = serializers.DateTimeField(required=False, allow_null=True)
    reminder_offset_minutes = serializers.IntegerField(required=False, allow_null=True)
    reminder_calculated_time = serializers.DateTimeField(read_only=True)

    # –ü–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    column_id = serializers.IntegerField(write_only=True, required=False)
    position_in_column = serializers.IntegerField(write_only=True, required=False)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    reminder_status = serializers.SerializerMethodField()
    is_reminder_active = serializers.SerializerMethodField()

    class Meta:
        model = Card
        # –ö–†–ò–¢–ò–ß–ù–û: —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤–∫–ª—é—á–µ–Ω—ã!
        fields = '__all__'
        # –ò–õ–ò —è–≤–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ:
        # fields = [
        #     'id', 'name', 'description', 'board', 'created', 'updated',
        #     'date_time_start', 'date_time_finish',  # <- –≠–¢–ò –ü–û–õ–Ø
        #     'reminder_offset_minutes', 'reminder_calculated_time',  # <- –ò –≠–¢–ò
        #     'reminder_status', 'is_reminder_active',
        #     # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        # ]

    # –î–û–ë–ê–í–¨–¢–ï –û–¢–õ–ê–î–ö–£ –≤ update –º–µ—Ç–æ–¥:
    def update(self, instance, validated_data):
        print(f"üîç SERIALIZER DEBUG: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print(f"- validated_data: {validated_data}")
        print(f"- instance.id: {instance.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –ø—Ä–∏—à–ª–∏
        if 'date_time_start' in validated_data:
            print(f"‚úÖ date_time_start: {validated_data['date_time_start']}")
        if 'date_time_finish' in validated_data:
            print(f"‚úÖ date_time_finish: {validated_data['date_time_finish']}")
        if 'reminder_offset_minutes' in validated_data:
            print(f"‚úÖ reminder_offset_minutes: {validated_data['reminder_offset_minutes']}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        old_offset = instance.reminder_offset_minutes
        old_calculated = instance.reminder_calculated_time

        # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        if validated_data.get('is_completed', False):
            if instance.reminder_offset_minutes or instance.reminder_calculated_time:
                print(f"SERIALIZER DEBUG: –û—Ç–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ {instance.id}")
                validated_data['reminder_offset_minutes'] = None
                validated_data['reminder_calculated_time'] = None

        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–æ–¥–µ–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if 'request' in self.context:
            instance._current_user = self.context['request'].user

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Å—Ç–∞–Ω—Å
        result = super().update(instance, validated_data)

        print(f"üîç SERIALIZER DEBUG: –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print(f"- result.date_time_start: {result.date_time_start}")
        print(f"- result.date_time_finish: {result.date_time_finish}")
        print(f"- result.reminder_offset_minutes: {result.reminder_offset_minutes}")
        print(f"- result.reminder_calculated_time: {result.reminder_calculated_time}")

        return result


class ColumnSerializer(serializers.ModelSerializer):
    class Meta:
        model = Column
        fields = '__all__'


class ColorSerializer(serializers.ModelSerializer):
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ü–≤–µ—Ç–æ–≤"""

    # –ü–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
    normal = serializers.CharField(source='normal_color', read_only=True)
    hover = serializers.CharField(source='hover_color', read_only=True)
    colorNumber = serializers.IntegerField(source='color_number', read_only=True)
    colorName = serializers.CharField(source='color_name', read_only=True)
    isDark = serializers.BooleanField(source='is_dark', read_only=True)
    textColor = serializers.CharField(source='text_color', read_only=True)

    class Meta:
        model = Color
        fields = [
            'id', 'color_number', 'normal_color', 'hover_color',
            'color_name', 'is_dark', 'text_color',
            # –ü–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            'normal', 'hover', 'colorNumber', 'colorName', 'isDark', 'textColor'
        ]


class ChipSerializer(serializers.ModelSerializer):
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —á–∏–ø–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–≤–µ—Ç–µ"""
    color = ColorSerializer(read_only=True)
    color_id = serializers.IntegerField(write_only=True)

    # –ü–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –¥–µ–ª–∞–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏
    text = serializers.CharField(source='name', required=False, allow_blank=True)
    color_number = serializers.IntegerField(source='color.color_number', read_only=True)

    class Meta:
        model = Chip
        fields = [
            'id', 'name', 'color', 'color_id', 'created', 'updated',
            # –ü–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            'text', 'color_number'
        ]
        # –î–µ–ª–∞–µ–º name –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
        extra_kwargs = {
            'name': {'required': False, 'allow_blank': True},
        }

    def create(self, validated_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∏–ø–∞ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç–æ–µ –∏–º—è"""
        # –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º —á–∏–ø –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
        print(f"Creating chip with name: '{validated_data.get('name', '')}'")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return super().create(validated_data)

    def update(self, instance, validated_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∏–ø–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if 'color_id' in validated_data:
            color_id = validated_data.pop('color_id')
            instance.color = Color.objects.get(id=color_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ
        if 'name' in validated_data:
            instance.name = validated_data['name']

        instance.save()
        instance.refresh_from_db()
        return instance

    def to_representation(self, instance):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è —Ü–≤–µ—Ç"""
        data = super().to_representation(instance)

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ü–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω –≤ –æ—Ç–≤–µ—Ç
        if instance.color:
            data['color'] = ColorSerializer(instance.color).data

        return data


class ChipDetailSerializer(serializers.ModelSerializer):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —á–∏–ø–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–≤–µ—Ç–µ"""
    color = ColorSerializer(read_only=True)

    # –ü–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
    text = serializers.CharField(source='name', read_only=True)
    color_number = serializers.IntegerField(source='color.color_number', read_only=True)

    class Meta:
        model = Chip
        fields = [
            'id', 'name', 'color', 'created', 'updated',
            # –ü–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            'text', 'color_number'
        ]


class CommentSerializer(serializers.ModelSerializer):
    class Meta:
        model = Comment
        fields = '__all__'


class ChecklistItemSerializer(serializers.ModelSerializer):
    class Meta:
        model = ChecklistItem
        fields = '__all__'


class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserProfile
        # model = get_user_model()
        # fields = '__all__'
        fields = (
            'active_board',
            'photo',
            'id',
            'is_superuser',
            'username',
            'first_name',
            'last_name',
            'email',
            'is_staff',
        )


class BoardMembershipSerializer(serializers.ModelSerializer):
    user = serializers.SlugRelatedField(slug_field='username', queryset=UserProfile.objects.all())
    board = serializers.SlugRelatedField(slug_field='name', queryset=Board.objects.all())

    class Meta:
        model = BoardMembership
        fields = ['user', 'board', 'role', 'created_at']

    def create(self, validated_data):
        return BoardMembership.objects.create(**validated_data)

    def update(self, instance, validated_data):
        instance.role = validated_data.get('role', instance.role)
        instance.save()
        return instance
