{"version":3,"file":"static/js/App.d1551ad1.chunk.js","mappings":"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","sources":["Components/NavBar/NavBar.jsx","App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n// import { NavLink } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n// import MUI components\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select from \"@mui/material/Select\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Menu from \"@mui/material/Menu\";\nimport IconButton from \"@mui/material/IconButton\";\n\nimport { styled } from \"@mui/material/styles\";\nimport { purple } from \"@mui/material/colors\";\n\n//import states from Redux\nimport { userData } from \"../../Redux/auth/auth-slice\";\nimport { boardData } from \"../../Redux/board/board-slice\";\n\n// import static\nimport logo from \"../../static/images/logo-no-background.png\";\nimport { useGetBoardsQuery, useGetActiveBoardMutation } from \"../../Redux/board/board-operations\";\nimport { logOut } from \"../../Redux/auth/auth-operations\";\nimport { getActiveBoardId } from \"../../Redux/board/board-slice\";\nimport { useGetUsersQuery } from \"../../Redux/user/user-operations\";\n\nconst LogOutButton = styled(Button)(({ theme }) => ({\n  height: \"40px\",\n  minWidth: \"96px\",\n  fontSize: \" 17px\",\n  lineHeight: \"1.5px\",\n  color: theme.palette.getContrastText(purple[500]),\n  backgroundColor: purple[500],\n  \"&:hover\": {\n    backgroundColor: purple[700],\n  },\n}));\n\nconst BoardSelect = styled(Select)(({ theme }) => ({\n  fieldset: {\n    borderColor: \"#fff\",\n  },\n  svg: { color: \"#fff\" },\n}));\n\nlet user = {}\n\nexport default function Navbar() {\n  const settings = [\"Profile\", \"Account\", \"Dashboard\", \"Logout\"];\n\n  const boardDataFromState = useSelector(boardData);\n  const id = boardDataFromState.id;\n\n  const [currentBoard, seCurrentBoard] = useState(id);\n  const [anchorElUser, setAnchorElUser] = React.useState(null);\n\n  const userDataFromState = useSelector(userData);\n  const username = userDataFromState.user.name;\n  const isLoggedIn = userDataFromState.isLoggedIn;\n\n  const [updateBoardDetail] = useGetActiveBoardMutation();\n  const { data: boards } = useGetBoardsQuery();\n\n  const { data: users, isSuccess } = useGetUsersQuery();\nconsole.log('isSuccess ', isSuccess);\n\n  useEffect(() => {\n    if (!users) return\n    user = users.find((element) => element.username === username)\n  },[username, users])\n\n  const {userProfileName, userProfilePhoto} = user\n  const dispatch = useDispatch();\n\n  const getBoard = async (event) => {\n    try {\n      const tempCurrentBoard = event.target.value;\n\n      dispatch(getActiveBoardId(tempCurrentBoard));\n      seCurrentBoard(tempCurrentBoard);\n      await updateBoardDetail(tempCurrentBoard);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleOpenUserMenu = (event) => {\n    setAnchorElUser(event.currentTarget);\n  };\n\n  const handleCloseUserMenu = () => {\n    setAnchorElUser(null);\n  };\n  return (\n    <Box\n      sx={{\n        position: \"fixed\",\n        zIndex: \"999\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        flexWrap: \"nowrap\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        paddingRight: \"10px\",\n        width: \"100%\",\n        height: \"64px\",\n        backgroundColor: \"#2f2f2f\",\n      }}\n    >\n      <Box\n        sx={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          width: \"164px\",\n          height: \"64px\",\n        }}\n      >\n        <img height={\"50px\"} srcSet={logo} src={logo} alt={\"logo\"} loading=\"lazy\" />\n      </Box>\n      {isLoggedIn && (\n        <>\n          <Box\n            sx={{\n              display: \"flex\",\n              justifyContent: \"flex-start\",\n              alignItems: \"center\",\n              marginLeft: \"20px\",\n              width: \"inherit\",\n            }}\n          >\n            <FormControl sx={{ color: \"#fff\", m: 1, width: 200 }} size=\"small\">\n              <InputLabel sx={{ color: \"#fff\" }} id=\"demo-simple-select-helper-label\">\n                Рабочая доска\n              </InputLabel>\n              <BoardSelect\n                defaultValue={\"\"}\n                sx={{ color: \"#fff\" }}\n                labelId=\"board-simple-select-helper-label\"\n                id=\"board-simple-select-helper\"\n                value={currentBoard || \"\"}\n                label=\"Рабочая доска\"\n                onChange={getBoard}\n              >\n                {!!boards &&\n                  boards.map((board) => {\n                    const { id, name } = board;\n\n                    return (\n                      <MenuItem key={id} value={id}>\n                        {name}\n                      </MenuItem>\n                    );\n                  })}\n              </BoardSelect>\n            </FormControl>\n          </Box>\n          {\n            isSuccess &&\n            \n          <Box sx={{ flexGrow: 0 }}>\n            <Tooltip title=\"Open settings\">\n              <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\n                <Avatar alt={`${userProfileName}`} src={`${userProfilePhoto}`} />\n              </IconButton>\n            </Tooltip>\n            <Menu\n              sx={{ mt: \"45px\" }}\n              id=\"menu-appbar\"\n              anchorEl={anchorElUser}\n              anchorOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              open={Boolean(anchorElUser)}\n              onClose={handleCloseUserMenu}\n            >\n              {settings.map((setting) => (\n                <MenuItem key={setting} onClick={handleCloseUserMenu}>\n                  <Typography textAlign=\"center\">{setting}</Typography>\n                </MenuItem>\n              ))}\n            </Menu>\n          </Box>\n\n          }\n          {/* <Typography\n            sx={{\n              cursor: \"default\",\n              fontSize: \"20px\",\n              color: \"#fff\",\n              width: \"100px\",\n              padding: \"3px\",\n            }}\n          >\n            {username}\n          </Typography> */}\n          <LogOutButton onClick={() => dispatch(logOut())}>Выйти</LogOutButton>\n        </>\n      )}\n    </Box>\n  );\n}\n","import \"./App.css\";\nimport { useEffect } from \"react\";\n\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\n// import { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFns\";\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV3'\nimport { Outlet } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n//import components\nimport Navbar from \"./Components/NavBar/NavBar\";\n\nimport { userData } from \"./Redux/auth/auth-slice\";\nimport { refreshUser } from \"./Redux/auth/auth-operations\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  const userDataFromState = useSelector(userData);\n  const accessToken = userDataFromState.accessToken;\n\n  useEffect(() => {\n    if (accessToken === null) {\n      return;\n    }\n    dispatch(refreshUser());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <div className=\"App\">\n        <Navbar />\n        <Outlet />\n      </div>\n    </LocalizationProvider>\n  );\n}\n\nexport default App;\n"],"names":["LogOutButton","styled","Button","_ref","theme","height","minWidth","fontSize","lineHeight","color","palette","getContrastText","purple","backgroundColor","BoardSelect","Select","_ref2","fieldset","borderColor","svg","user","Navbar","id","useSelector","boardData","currentBoard","seCurrentBoard","useState","anchorElUser","setAnchorElUser","React","userDataFromState","userData","username","name","isLoggedIn","updateBoardDetail","useGetActiveBoardMutation","data","boards","useGetBoardsQuery","users","isSuccess","useGetUsersQuery","console","log","useEffect","find","element","userProfileName","userProfilePhoto","dispatch","useDispatch","handleCloseUserMenu","_jsxs","Box","sx","position","zIndex","display","flexDirection","flexWrap","justifyContent","alignItems","paddingRight","width","children","_jsx","srcSet","logo","src","alt","loading","_Fragment","marginLeft","FormControl","m","size","InputLabel","defaultValue","labelId","value","label","onChange","async","tempCurrentBoard","event","target","getActiveBoardId","error","map","board","MenuItem","flexGrow","Tooltip","title","IconButton","onClick","currentTarget","p","Avatar","concat","Menu","mt","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","setting","Typography","textAlign","logOut","accessToken","refreshUser","LocalizationProvider","dateAdapter","AdapterDateFns","className","Outlet"],"sourceRoot":""}