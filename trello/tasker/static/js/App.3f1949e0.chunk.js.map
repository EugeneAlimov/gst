{"version":3,"file":"static/js/App.3f1949e0.chunk.js","mappings":"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","sources":["Components/NavBar/UserNav.jsx","Components/NavBar/BoardSelectNav.jsx","Components/NavBar/NavBar.jsx","App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\n// import MUI components\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Menu from \"@mui/material/Menu\";\nimport IconButton from \"@mui/material/IconButton\";\n\nimport { useGetUsersQuery } from \"../../Redux/user/user-operations\";\nimport { logOut } from \"../../Redux/auth/auth-operations\";\n\nexport default function UserNav({ userName }) {\n  const dispatch = useDispatch();\n\n  const { data: users } = useGetUsersQuery();\n  const [anchorElUser, setAnchorElUser] = useState(null);\n  const [user, setUser] = useState({});\n\n  useEffect(() => {\n\n    if (!users) return;\n    const w = users.find((element) => element.username === userName)\n\n    setUser(w);\n  }, [userName, users]);\n\n  const { username: name, photo } = user;\n\n  const handleOpenUserMenu = (event) => {\n    setAnchorElUser(event.currentTarget);\n  };\n\n  const handleCloseUserMenu = () => {\n    setAnchorElUser(null);\n  };\n\n  const handleClose = () => {\n    setAnchorElUser(null);\n    dispatch(logOut())\n  }\n\n  return (\n    <>\n      <Box sx={{ flexGrow: 0 }}>\n        <Tooltip title={name}>\n          <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\n            <Avatar alt={name} src={photo} />\n          </IconButton>\n        </Tooltip>\n        <Menu\n          sx={{ mt: \"45px\" }}\n          id=\"menu-appbar\"\n          anchorEl={anchorElUser}\n          anchorOrigin={{\n            vertical: \"top\",\n            horizontal: \"right\",\n          }}\n          keepMounted\n          transformOrigin={{\n            vertical: \"top\",\n            horizontal: \"right\",\n          }}\n          open={Boolean(anchorElUser)}\n          onClose={handleCloseUserMenu}\n        >\n          <MenuItem key={1} onClick={handleCloseUserMenu}>\n            <Typography textAlign=\"center\">{\"Настройки профиля\"}</Typography>\n          </MenuItem>\n          <MenuItem key={2} onClick={handleClose}>\n            <Typography textAlign=\"center\">{\"Выйти\"}</Typography>\n          </MenuItem>\n        </Menu>\n      </Box>\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select from \"@mui/material/Select\";\nimport Box from \"@mui/material/Box\";\n\nimport { styled } from \"@mui/material/styles\";\n\n//import states from Redux\nimport { boardData } from \"../../Redux/board/board-slice\";\n\n// import static\nimport { useGetBoardsQuery, useGetActiveBoardMutation } from \"../../Redux/board/board-operations\";\nimport { getActiveBoardId } from \"../../Redux/board/board-slice\";\n\nconst BoardSelect = styled(Select)(({ theme }) => ({\n  fieldset: {\n    borderColor: \"#fff\",\n  },\n  svg: { color: \"#fff\" },\n}));\n\nexport default function BoardSelectNav({ isLoggedIn }) {\n  const boardDataFromState = useSelector(boardData);\n  const id = boardDataFromState.id;\n\n  const [currentBoard, seCurrentBoard] = useState(id);\n\n  const [updateBoardDetail] = useGetActiveBoardMutation();\n  const { data: boards, refetch } = useGetBoardsQuery();\n\n  const dispatch = useDispatch();\n\n  const getBoard = async (event) => {\n    try {\n      const tempCurrentBoard = event.target.value;\n\n      dispatch(getActiveBoardId(tempCurrentBoard));\n      seCurrentBoard(tempCurrentBoard);\n      await updateBoardDetail(tempCurrentBoard);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (isLoggedIn) refetch();\n  }, [isLoggedIn, refetch]);\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        alignItems: \"center\",\n        marginLeft: \"20px\",\n        width: \"inherit\",\n      }}\n    >\n      <FormControl sx={{ color: \"#fff\", m: 1, width: 200 }} size=\"small\">\n        <InputLabel sx={{ color: \"#fff\" }} id=\"demo-simple-select-helper-label\">\n          Рабочая доска\n        </InputLabel>\n        <BoardSelect\n          defaultValue={\"\"}\n          sx={{ color: \"#fff\" }}\n          labelId=\"board-simple-select-helper-label\"\n          id=\"board-simple-select-helper\"\n          value={currentBoard || \"Доска не выбрана\"}\n          label=\"Рабочая доска\"\n          onChange={getBoard}\n        >\n          {!!boards &&\n            boards.map((board) => {\n              const { id, name } = board;\n\n              return (\n                <MenuItem key={id} value={id}>\n                  {name}\n                </MenuItem>\n              );\n            })}\n        </BoardSelect>\n      </FormControl>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\n// import MUI components\nimport Box from \"@mui/material/Box\";\n\n//import states from Redux\nimport { userData } from \"../../Redux/auth/auth-slice\";\n\n// import static\nimport logo from \"../../static/images/logo-no-background.png\";\nimport UserNav from \"./UserNav\";\nimport BoardSelectNav from \"./BoardSelectNav\";\n\nexport default function Navbar() {\n  const userDataFromState = useSelector(userData);\n  const isLoggedIn = userDataFromState.isLoggedIn;\n  const username = userDataFromState.user.name;\n\n  return (\n    <Box\n      sx={{\n        position: \"fixed\",\n        zIndex: \"999\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        flexWrap: \"nowrap\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        paddingRight: \"10px\",\n        width: \"100%\",\n        height: \"64px\",\n        backgroundColor: \"#2f2f2f\",\n      }}\n    >\n      <Box\n        sx={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          width: \"164px\",\n          height: \"64px\",\n        }}\n      >\n        <img height={\"50px\"} srcSet={logo} src={logo} alt={\"logo\"} loading=\"lazy\" />\n      </Box>\n      {isLoggedIn && (\n        <>\n          <BoardSelectNav isLoggedIn={isLoggedIn} />\n          <UserNav userName={username} />\n        </>\n      )}\n    </Box>\n  );\n}\n","import \"./App.css\";\nimport { useEffect } from \"react\";\n\nimport { LocalizationProvider } from \"@mui/x-date-pickers\";\n// import { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFns\";\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV3'\nimport { Outlet } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n//import components\nimport Navbar from \"./Components/NavBar/NavBar\";\n\nimport { userData } from \"./Redux/auth/auth-slice\";\nimport { refreshUser } from \"./Redux/auth/auth-operations\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  const userDataFromState = useSelector(userData);\n  const accessToken = userDataFromState.accessToken;\n\n  useEffect(() => {\n    if (accessToken === null) {\n      return;\n    }\n    dispatch(refreshUser());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch]);\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <div className=\"App\">\n        <Navbar />\n        <Outlet />\n      </div>\n    </LocalizationProvider>\n  );\n}\n\nexport default App;\n"],"names":["UserNav","_ref","userName","dispatch","useDispatch","data","users","useGetUsersQuery","anchorElUser","setAnchorElUser","useState","user","setUser","useEffect","w","find","element","username","name","photo","handleCloseUserMenu","_jsx","_Fragment","children","_jsxs","Box","sx","flexGrow","Tooltip","title","IconButton","onClick","event","currentTarget","p","Avatar","alt","src","Menu","mt","id","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","MenuItem","Typography","textAlign","handleClose","logOut","BoardSelect","styled","Select","theme","fieldset","borderColor","svg","color","BoardSelectNav","_ref2","isLoggedIn","useSelector","boardData","currentBoard","seCurrentBoard","updateBoardDetail","useGetActiveBoardMutation","boards","refetch","useGetBoardsQuery","display","justifyContent","alignItems","marginLeft","width","FormControl","m","size","InputLabel","defaultValue","labelId","value","label","onChange","async","tempCurrentBoard","target","getActiveBoardId","error","console","log","map","board","Navbar","userDataFromState","userData","position","zIndex","flexDirection","flexWrap","paddingRight","height","backgroundColor","srcSet","logo","loading","accessToken","refreshUser","LocalizationProvider","dateAdapter","AdapterDateFns","className","Outlet"],"sourceRoot":""}